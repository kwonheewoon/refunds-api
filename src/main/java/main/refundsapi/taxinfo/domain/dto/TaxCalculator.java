package main.refundsapi.taxinfo.domain.dto;import main.refundsapi.common.TaxCalculations;import main.refundsapi.scrap.domain.dto.JsonListDto;import main.refundsapi.scrap.domain.dto.ResponseDto;import main.refundsapi.scrap.enums.ScrapCode;import main.refundsapi.scrap.exception.ScrapException;import main.refundsapi.taxinfo.domain.entity.TaxInfo;import main.refundsapi.refund.domain.RefundApiDto;import main.refundsapi.util.CommonUtil;import java.math.BigDecimal;import java.math.RoundingMode;import static main.refundsapi.common.TaxCalculations.CALC_INTEGER_130_000;public class TaxCalculator {    public static TaxInfoDto calculateTaxInfo(ResponseDto responseDto) {        if (null == responseDto || null == responseDto.jsonListData()) {            throw new ScrapException(ScrapCode.NOT_SCRAP_USER);        }        JsonListDto jsonListDto = responseDto.jsonListData();        BigDecimal eitca = jsonListDto.calcEitca();        BigDecimal sptda = jsonListDto.calcSptda();        BigDecimal cta = jsonListDto.calcTaxAmount();        BigDecimal stda = sptda.compareTo(CALC_INTEGER_130_000) < 0 ? CALC_INTEGER_130_000 : BigDecimal.ZERO;        BigDecimal rptda = jsonListDto.calcRptda();        return new TaxInfoDto(eitca, sptda, cta, stda, rptda);    }    public static RefundApiDto calculateRefund(String userName, TaxInfo taxInfo){        BigDecimal dta = taxInfo.getCta()                .subtract(taxInfo.getEitca())                .subtract(taxInfo.getSptda())                .subtract(taxInfo.getStda())                .subtract(taxInfo.getRptda());        if(dta.compareTo(BigDecimal.ZERO) < 0){            dta = BigDecimal.ZERO;        }        return new RefundApiDto(userName,                CommonUtil.amountFormat(dta.setScale(1, RoundingMode.HALF_UP)),                CommonUtil.amountFormat(taxInfo.getRptda().setScale(1, RoundingMode.HALF_UP)));    }}