package main.refundsapi.refund.service;import lombok.RequiredArgsConstructor;import main.refundsapi.user.enums.UserCode;import main.refundsapi.user.exception.UserException;import main.refundsapi.user.repository.UserRepository;import main.refundsapi.taxinfo.domain.dto.TaxCalculator;import main.refundsapi.taxinfo.repository.TaxInfoRepository;import main.refundsapi.refund.domain.RefundApiDto;import main.refundsapi.refund.enums.RefundCode;import main.refundsapi.refund.exception.RefundException;import main.refundsapi.util.SecurityUtil;import org.springframework.stereotype.Service;@Service@RequiredArgsConstructorpublic class RefundService {    private final TaxInfoRepository taxInfoRepository;    private final UserRepository userRepository;    public RefundApiDto calculateRefund(){        var findUser = userRepository.findByUserId(SecurityUtil.getCurrentUserId().orElseThrow(() -> new UserException(UserCode.USER_NOT_FOUND)))                .orElseThrow(() -> new UserException(UserCode.USER_NOT_FOUND));        var findTaxInfo = taxInfoRepository.findByUser(findUser).orElseThrow(() -> new RefundException(RefundCode.REFUND_CALC_FAIL));        return TaxCalculator.calculateRefund(findUser.getName(), findTaxInfo);    }}