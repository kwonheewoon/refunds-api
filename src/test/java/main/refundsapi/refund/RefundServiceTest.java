package main.refundsapi.refund;import lombok.extern.slf4j.Slf4j;import main.refundsapi.login.domain.dto.LoginDto;import main.refundsapi.refund.service.RefundService;import main.refundsapi.taxinfo.domain.entity.TaxInfo;import main.refundsapi.taxinfo.repository.TaxInfoRepository;import main.refundsapi.user.domain.entity.User;import main.refundsapi.user.repository.UserRepository;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import java.math.BigDecimal;import java.util.Collections;import java.util.Optional;import static org.junit.jupiter.api.Assertions.*;import static org.mockito.ArgumentMatchers.any;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.BDDMockito.given;@ExtendWith(MockitoExtension.class)@Slf4jpublic class RefundServiceTest {    @Mock    private UserRepository userRepository;    @Mock    private TaxInfoRepository taxInfoRepository;    @InjectMocks    private RefundService refundService;    @BeforeEach    void setUp(){        SecurityContext securityContext = Mockito.mock(SecurityContext.class);        Authentication authentication = Mockito.mock(Authentication.class);        Mockito.when(securityContext.getAuthentication()).thenReturn(authentication);        Mockito.when(authentication.getPrincipal()).thenReturn(                new org.springframework.security.core.userdetails.User("hong123", "", Collections.emptyList()));        SecurityContextHolder.setContext(securityContext);    }    @AfterEach    void stopServer() {        SecurityContextHolder.clearContext();    }    @Test    void 환급금액계산성공(){        var returnUser = User.builder()                .id(10L)                .name("홍길동")                .userId("hong123")                .password("aGp6hc05mNo6Il/4re7e4g==")                .regNo("860824-1655068")                .build();        var taxInfo = TaxInfo.builder()                        .user(returnUser)                        .cta(new BigDecimal("3000000.00"))                        .eitca(new BigDecimal("1650000.00"))                        .rptda(new BigDecimal("900000.00"))                        .sptda(new BigDecimal("454500.00"))                        .stda(new BigDecimal("0.00"))                      .build();        given(userRepository.findByUserId(anyString())).willReturn(Optional.of(returnUser));        given(taxInfoRepository.findByUser(any()))                .willReturn(Optional.of(taxInfo));        var result = refundService.calculateRefund();        assertNotNull(result);    }}