package main.refundsapi.scrap;import lombok.extern.slf4j.Slf4j;import lombok.val;import main.refundsapi.scrap.domain.dto.*;import main.refundsapi.scrap.enums.ScrapCode;import main.refundsapi.scrap.exception.ScrapException;import main.refundsapi.taxinfo.domain.dto.TaxCalculator;import main.refundsapi.taxinfo.domain.dto.TaxInfoDto;import main.refundsapi.user.exception.UserException;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.junit.jupiter.MockitoExtension;import java.math.BigDecimal;import java.util.Arrays;import java.util.List;import static org.junit.jupiter.api.Assertions.assertThrows;@ExtendWith(MockitoExtension.class)@Slf4jpublic class ScrapTest {    @Test    void 홍길동_세액계산(){        // given        ScrapResponseDto scrapResponseDto = ScrapResponseDtoFactory.hongResponse();        // when        TaxInfoDto taxInfoDto = TaxCalculator.calculateTaxInfo(scrapResponseDto.data());        // then        Assertions.assertEquals(new BigDecimal("1650000.00"), taxInfoDto.eitca());        Assertions.assertEquals(new BigDecimal("454500.0000"), taxInfoDto.sptda());        Assertions.assertEquals(new BigDecimal("3000000"), taxInfoDto.cta());        Assertions.assertEquals(new BigDecimal("0"), taxInfoDto.stda());        Assertions.assertEquals(new BigDecimal("900000.00"), taxInfoDto.rptda());        log.info("scrap = {}", taxInfoDto);    }    @Test    void 김둘리_세액계산(){        // given        ScrapResponseDto scrapResponseDto = ScrapResponseDtoFactory.kimResponse();        // when        TaxInfoDto taxInfoDto = TaxCalculator.calculateTaxInfo(scrapResponseDto.data());        // then        Assertions.assertEquals(new BigDecimal("660000.00"), taxInfoDto.eitca());        Assertions.assertEquals(new BigDecimal("64500.00"), taxInfoDto.sptda());        Assertions.assertEquals(new BigDecimal("1200000"), taxInfoDto.cta());        Assertions.assertEquals(new BigDecimal("130000"), taxInfoDto.stda());        Assertions.assertEquals(new BigDecimal("199999.99995"), taxInfoDto.rptda());        log.info("scrap = {}", taxInfoDto);    }    @Test    void 마징가_세액계산(){        // given        ScrapResponseDto scrapResponseDto = ScrapResponseDtoFactory.mazingResponse();        // when        TaxInfoDto taxInfoDto = TaxCalculator.calculateTaxInfo(scrapResponseDto.data());        // then        Assertions.assertEquals(new BigDecimal("2585000.0605"), taxInfoDto.eitca());        Assertions.assertEquals(new BigDecimal("474000.0000"), taxInfoDto.sptda());        Assertions.assertEquals(new BigDecimal("4700000.11"), taxInfoDto.cta());        Assertions.assertEquals(new BigDecimal("0"), taxInfoDto.stda());        Assertions.assertEquals(new BigDecimal("1084999.99995"), taxInfoDto.rptda());        log.info("scrap = {}", taxInfoDto);    }    @Test    void 손오공_세액계산(){        // given        ScrapResponseDto scrapResponseDto = ScrapResponseDtoFactory.sonResponse();        // when        TaxInfoDto taxInfoDto = TaxCalculator.calculateTaxInfo(scrapResponseDto.data());        // then        Assertions.assertEquals(new BigDecimal("1650000.00"), taxInfoDto.eitca());        Assertions.assertEquals(new BigDecimal("94200.00"), taxInfoDto.sptda());        Assertions.assertEquals(new BigDecimal("3000000"), taxInfoDto.cta());        Assertions.assertEquals(new BigDecimal("130000"), taxInfoDto.stda());        Assertions.assertEquals(new BigDecimal("450000.00"), taxInfoDto.rptda());        log.info("scrap = {}", taxInfoDto);    }    @Test    @DisplayName("요청하신 값은 스크랩 가능유저가 아닙니다.")    void 배지터_세액계산_에러(){        // given        ScrapResponseDto scrapResponseDto = new ScrapResponseDto("fail", null, "");        // when        val throwable = assertThrows(ScrapException.class, () -> TaxCalculator.calculateTaxInfo(scrapResponseDto.data()));        // then        Assertions.assertEquals(throwable.getCode(), ScrapCode.NOT_SCRAP_USER.getCode());    }}