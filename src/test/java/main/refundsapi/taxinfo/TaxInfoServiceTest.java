package main.refundsapi.taxinfo;import lombok.extern.slf4j.Slf4j;import main.refundsapi.scrap.domain.dto.*;import main.refundsapi.taxinfo.domain.entity.TaxInfo;import main.refundsapi.taxinfo.repository.TaxInfoRepository;import main.refundsapi.taxinfo.service.TaxInfoService;import main.refundsapi.user.domain.entity.User;import main.refundsapi.user.repository.UserRepository;import org.junit.jupiter.api.*;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import org.mockserver.integration.ClientAndServer;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.test.util.ReflectionTestUtils;import java.math.BigDecimal;import java.util.Arrays;import java.util.Collections;import java.util.Optional;import static org.mockito.ArgumentMatchers.any;import static org.mockito.ArgumentMatchers.anyString;import static org.mockito.BDDMockito.given;import static org.mockserver.model.HttpRequest.request;import static org.mockserver.model.HttpResponse.response;import static org.mockserver.model.JsonBody.json;@ExtendWith(MockitoExtension.class)@Slf4jpublic class TaxInfoServiceTest {    private ClientAndServer mockServer;    private ScrapResponseDto scrapResponseDto;    @InjectMocks    private TaxInfoService taxInfoService;    @Mock    private TaxInfoRepository taxInfoRepository;    @Mock    private UserRepository userRepository;    private String json;    @BeforeEach    void setUp() {        ReflectionTestUtils.setField(taxInfoService,                "host",                "http://localhost:8888");        json = "{\n" +                "    \"status\": \"success\",\n" +                "    \"data\": {\n" +                "        \"jsonList\": {\n" +                "            \"급여\": [\n" +                "                {\n" +                "                    \"소득내역\": \"급여\",\n" +                "                    \"총지급액\": \"60,000,000\",\n" +                "                    \"업무시작일\": \"2020.10.02\",\n" +                "                    \"기업명\": \"(주)활빈당\",\n" +                "                    \"이름\": \"홍길동\",\n" +                "                    \"지급일\": \"2020.11.02\",\n" +                "                    \"업무종료일\": \"2021.11.02\",\n" +                "                    \"주민등록번호\": \"860824-1655068\",\n" +                "                    \"소득구분\": \"근로소득(연간)\",\n" +                "                    \"사업자등록번호\": \"012-34-56789\"\n" +                "                }\n" +                "            ],\n" +                "            \"산출세액\": \"3,000,000\",\n" +                "            \"소득공제\": [\n" +                "                {\n" +                "                    \"금액\": \"100,000\",\n" +                "                    \"소득구분\": \"보험료\"\n" +                "                },\n" +                "                {\n" +                "                    \"금액\": \"200,000\",\n" +                "                    \"소득구분\": \"교육비\"\n" +                "                },\n" +                "                {\n" +                "                    \"금액\": \"150,000\",\n" +                "                    \"소득구분\": \"기부금\"\n" +                "                },\n" +                "                {\n" +                "                    \"금액\": \"4,400,000\",\n" +                "                    \"소득구분\": \"의료비\"\n" +                "                },\n" +                "                {\n" +                "                    \"소득구분\": \"퇴직연금\",\n" +                "                    \"총납임금액\": \"6,000,000\"\n" +                "                }\n" +                "            ]\n" +                "        },\n" +                "        \"appVer\": \"2021112501\",\n" +                "        \"errMsg\": \"\",\n" +                "        \"company\": \"삼쩜삼\",\n" +                "        \"svcCd\": \"test01\",\n" +                "        \"hostNm\": \"jobis-codetest\",\n" +                "        \"workerResDt\": \"2022-08-16T06:27:35.160789\",\n" +                "        \"workerReqDt\": \"2022-08-16T06:27:35.160851\"\n" +                "    },\n" +                "    \"errors\": {}\n" +                "}";        mockServer = ClientAndServer.startClientAndServer(8888);    }    @AfterEach    void stopServer() {        SecurityContextHolder.clearContext();        this.mockServer.stop();    }    @Test    void findScrapTest(){        SecurityContext securityContext = Mockito.mock(SecurityContext.class);        Authentication authentication = Mockito.mock(Authentication.class);        Mockito.when(securityContext.getAuthentication()).thenReturn(authentication);        Mockito.when(authentication.getPrincipal()).thenReturn(                new org.springframework.security.core.userdetails.User("hong123", "", Collections.emptyList()));        SecurityContextHolder.setContext(securityContext);        var returnUser = User.builder()                .id(10L)                .name("홍길동")                .userId("hong123")                .password("aGp6hc05mNo6Il/4re7e4g==")                .regNo("860824-1655068")                .build();        var taxInfo = TaxInfo.builder()                .user(returnUser)                .cta(new BigDecimal("3000000.00"))                .eitca(new BigDecimal("1650000.00"))                .rptda(new BigDecimal("900000.00"))                .sptda(new BigDecimal("454500.00"))                .stda(new BigDecimal("0.00"))                .build();         scrapResponseDto = new ScrapResponseDto("success",                new ResponseDto(                        new JsonListDto(                                Arrays.asList(                                        new SalaryInfoDto("급여", "60,000,000", "2020.10.02", "(주)활빈당", "홍길동", "2020.11.02", "2021.11.02", "860284-1655068", "근로소득(연간)", "012-34-5678")                                ),                                "3,000,000",                                Arrays.asList(                                        new IncomeDeductionDto("100,000", "보험료", null), // 12000                                        new IncomeDeductionDto("200,000", "교육비", null), // 30000                                        new IncomeDeductionDto("150,000", "기부금", null), // 22500                                        new IncomeDeductionDto("4,400,000", "의료비", null),// -2040000                                        new IncomeDeductionDto(null, "퇴직연금", "6,000,000") // 900000                                )                        ),                        "2021112501",                        "",                        "삼쩜삼",                        "test01",                        "jobis-codetest",                        "2022-08-16T06:27:35.160789",                        "2022-08-16T06:27:35.160851"                )                , null);        mockServer.when(                request()                        .withMethod("POST")                        .withPath("/v2/scrap")                        .withBody(json("{\"name\": \""+returnUser.getName()+"\", \"regNo\": \""+returnUser.getRegNo()+"\"}"))        ).respond(                response()                        .withStatusCode(200)                        .withBody(json(json))        );        given(userRepository.findByUserId(anyString())).willReturn(Optional.of(returnUser));        given(taxInfoRepository.save(any()))                .willReturn(taxInfo);        var result = taxInfoService.findScrap();        Assertions.assertEquals(result.status(), scrapResponseDto.status());    }    @Test    void successScrapTest(){        var returnUser = User.builder()                .id(10L)                .name("홍길동")                .userId("hong123")                .password("aGp6hc05mNo6Il/4re7e4g==")                .regNo("860824-1655068")                .build();        var taxInfo = TaxInfo.builder()                .user(returnUser)                .cta(new BigDecimal("3000000.00"))                .eitca(new BigDecimal("1650000.00"))                .rptda(new BigDecimal("900000.00"))                .sptda(new BigDecimal("454500.00"))                .stda(new BigDecimal("0.00"))                .build();        scrapResponseDto = new ScrapResponseDto("success",                new ResponseDto(                        new JsonListDto(                                Arrays.asList(                                        new SalaryInfoDto("급여", "60,000,000", "2020.10.02", "(주)활빈당", "홍길동", "2020.11.02", "2021.11.02", "860284-1655068", "근로소득(연간)", "012-34-5678")                                ),                                "3,000,000",                                Arrays.asList(                                        new IncomeDeductionDto("100,000", "보험료", null), // 12000                                        new IncomeDeductionDto("200,000", "교육비", null), // 30000                                        new IncomeDeductionDto("150,000", "기부금", null), // 22500                                        new IncomeDeductionDto("4,400,000", "의료비", null),// -2040000                                        new IncomeDeductionDto(null, "퇴직연금", "6,000,000") // 900000                                )                        ),                        "2021112501",                        "",                        "삼쩜삼",                        "test01",                        "jobis-codetest",                        "2022-08-16T06:27:35.160789",                        "2022-08-16T06:27:35.160851"                )                , null);        mockServer.when(                request()                        .withMethod("POST")                        .withPath("/v2/scrap")                        .withBody(json("{\"name\": \""+returnUser.getName()+"\", \"regNo\": \""+returnUser.getRegNo()+"\"}"))        ).respond(                response()                        .withStatusCode(200)                        .withBody(json(json))        );        var result = taxInfoService.getScrapApi(returnUser.getName(), returnUser.getRegNo());        Assertions.assertEquals(result.status(), scrapResponseDto.status());    }    @Test    @DisplayName("잘못된 스크랩")    void failScrapTest(){        var returnUser = User.builder()                .id(10L)                .name("홍길동")                .userId("hong123")                .password("aGp6hc05mNo6Il/4re7e4g==")                .regNo("860824-1655068")                .build();        json = "{\n" +                "    \"status\": \"fail\",\n" +                "    \"errors\": {\n" +                "        \"code\": \"-1\",\n" +                "        \"message\": \"요청하신 값은 스크랩 가능유저가 아닙니다.\"\n" +                "    }\n" +                "}";        mockServer.when(                request()                        .withMethod("POST")                        .withPath("/v2/scrap")                        .withBody(json("{\"name\": \""+returnUser.getName()+"\", \"regNo\": \""+returnUser.getRegNo()+"\"}"))        ).respond(                response()                        .withStatusCode(200)                        .withBody(json(json))        );        var result = taxInfoService.getScrapApi(returnUser.getName(), returnUser.getRegNo());        Assertions.assertEquals(result.status(), "fail");    }}